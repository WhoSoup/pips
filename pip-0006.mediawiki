
<pre>
  PIP: 6
  Title: ECDSA Keys (RCD-e)
  Layer: Consensus (hard fork)
  Author: Steven Masley <steven@factom.com>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/pegnet/pips/wiki/Comments:PIP-0006
  Status: Draft
  Type: Standards Track
  Created: 2019-11-21
  License: BSD-2-Clause
</pre>

==Abstract==

To support the Ethereum gateway for pegnet tokens, pegnet will have to support ethereum keys. By supporting the signature scheme (ecdsa) used by Ethereum, all pegnet tokens going through the gateway will never change ownership. The same key used to redeem the pegnet tokens is the same that uses the erc20 tokens.

==Specification==

Factom addresses use an rcd structure detailed [https://github.com/FactomProject/FactomDocs/blob/master/factomDataStructureDetails.md#redeem-condition-datastructure-rcd here]. RCD-1 is the only current supported type. This PIP details a new RCD type, RCD-e. RCD-e will use the ecdsa signature scheme when validating transaction signatures. The  {{Inline-code | 1=e}} is for  {{Inline-code | 1=ethereum}} and is the first byte of the rcd.

===RCD Type e===

| data | Field Name | Description |
| ----------------- | ---------------- | --------------- |
| varInt_F | Type | The RCD type.  This specifies how the datastructure should be interpreted.  Type 14 `(0x0e)` indicates the Ethereum linked rcd.|
| 64 bytes | Pubkey 0 | The 64 byte ecdsa uncompressed public key. If generating an uncompressed key, and the length is 65, remove the `0x04` prefix indicating an uncompressed key. |

The private key is the 32 byte ecdsa private key. When represented as text, the Ethereum hex style `0x00..` should be used. Factom private keys are encoded in base58 with an `Fs` prefix. We do not want users to confuse the two types.

Signatures are 65 bytes in length. The first 64 bytes is the signature itself, with the 65th byte being the recovery byte. The recovery byte allows the operation `pubkey = recover(digest, signature)`.

Example Vector:
<pre>
Private Key: 0xbde0723b3236d7b7613d11c6c93c57ad89fd7f7c586aaa18f7a1b392aa2c39fd
 Public Key: 0x25892ecbaf10c71d52f260c0b43a8e6b2384324b02c0d4b576d74452b81c359068e584b8831287a1a21b21fd2ac0c0e326cfcdaff27df14261a78bee0e0177d4
  FAAddress: FA2M5uK3aPrJ8RfHdbTUL1ySxp22s3TwQ3Js6n7jss7QErw3S6ae
  FeAddress: Fe1UgCvpEx72E1fXYZUjfSk5bUGFUrTaZ5zzzVC7QuGz4vCjkoLM
 EthAddress: 0xD8A27BdCA2067F233551F29231CD2cDa0828bF62

     Digest: 0000000000000000000000000000000000000000000000000000000000000000
  Signature: 4bc4cee5b07114dcc0dd4a7654d42a1abc51f8d5c417fde8413686126a8cfb0633fac598664c46ec88be878f8fe9c3245e8385e00be107f021a937ab73d09d7a00
<pre>

It should be noticed that the resulting Factom address is encoded in the same method as the RCD-1; `0x5fb1 + sha256d(rcd) + checksum`. This imposes a potential risk to users, ad the RCD-e is not yet implemented into the Factom Protocol, and therefore unable to transfer FCT.

To protect users from making the mistake of transfering FCT to this new address type, a clientside protection standard should be used.

===ClientSide Protection===

In order to ensure funds are not accidently send to unredeemable locations, we can impose a different address encoding scheme for the rcd-e addresses. It should be known that although we are changing the encoding from the wallet, all explorers and external tools will still show the `FA...` address. All wallets should support these extra encoding standards. Any legacy wallets will intentionally fail to work with this new standard. If funds need to be sent from a legacy wallet, they will need to send to the alternative `FA...` encoding.

All user rcd-e addresses should be encoded as follows: [https://play.golang.org/p/95IShJNH9-V ExampleCode]
1. `RCDHash = Sha256(Sha256(rcd))` where `rcd` bytes are defined in the table above (`0x0e + pubkey`)
1. Concatenate the 0x62f4 prefix (`Fe`) and the rcdhash, `0x62f40000000000000000000000000000000000000000000000000000000000000000`
1. Take the SHA256d of the above data, and append the first 4 bytes to the end. 
1. Base58 encode the binary. 

An additional prefix can also be used by Ethereum Gateways, `0x6028` (`FE`). This will be explained below.

When a user inputs the `Fe` or `FE` encoding, the underlying wallet should understand the encoding and apply the clientside protections associated with each. The first is that legacy wallets only support FCT transactions, and such will reject any new encoding as invalid. This will protect legacy users from sending FCT to this new address type. The rules of which addresses can send to which is provided below. The main thing to note about `Fe` vs `FE` is that an `FA` address cannot send funds to an `FE` address. This is because an `FE` address indicates a gateway, and an `FA` address does not have a linked Ethereum address to receive the funds on the other side of the gateway. A user who sends pegged tokens to the `FE` address will be unable to redeem their tokens on the other side of the gateway.

{| class="wikitable"
! Input
! Currency
! style="text-align: center;" | Allowed
|-
| style="background-color:#ecf4ff;" | FA
| style="background-color:#ecf4ff;" | FCT
| style="text-align: center; background-color:#ecf4ff;" | FA
|-
| style="background-color:#ecf4ff;" | FA
| style="background-color:#ecf4ff;" | pXXX
| style="text-align: center; background-color:#ecf4ff;" | FA, eFA
|-
| style="background-color:#ffffc7;" | Fe
| style="background-color:#ffffc7;" | FCT
| style="text-align: center; background-color:#ffffc7;" | x
|-
| style="background-color:#ffffc7;" | Fe
| style="background-color:#ffffc7;" | pXXX
| style="text-align: center; background-color:#ffffc7;" | FA, eFA, EFA
|-
| style="background-color:#ffccc9;" | FE
| style="background-color:#ffccc9;" | FCT
| style="text-align: center; background-color:#ffccc9;" | x
|-
| style="background-color:#ffccc9;" | FE
| style="background-color:#ffccc9;" | pXXX
| style="text-align: center; background-color:#ffccc9;" | eFA, EFA
|}

===Linked Ethereum Address===

Since the rcd-e uses the ecdsa signature scheme, all rcd-e addresses should also display their linked etheruem address. The etheruem address derivation can be found in the `Ethereum Addresses` section in this [https://www.oreilly.com/library/view/mastering-ethereum/9781491971932/ch04.html chapter]. If a wallet supports this rcd-e type, the wallet should also show the user their linked Etheruem address. It should also indicate to the user their FA address if the user is going to confirm their address on a legacy explorer, or look at a transaction that has only FA addresses.

===Bip44 Derivation===

All Ethereum Linked addresses (`Fe`) should be derived using the Etheruem cointype path found in this [https://github.com/satoshilabs/slips/blob/master/slip-0044.md list]. The address generated by the wallet should have the linked Ethereum address that an ether wallet would generate. This means a user moving their seed from a Pegnet to Ether wallet after a Gateway transaction would see their coins.


==Motivation==

The motivation for this is to support an Ethereum gateway. In order to send tokens through the gateway and maintain ownership, the same private/public key should be able to redeem the tokens. This means Factom must support ECDSA keys.

==Rationale==

By implementing this address scheme, no gateway will ever be in the position where the ownership of the tokens might have changed. By ensuring the same owner is on both sides of the transaction, it is legally a much safer transaction. 


==Backwards compatibility==

This address type will likely be adopted by the Factom protocol in the future, so all wallets should plan to accept it. Until that is done, there will be an incompatibility between rcd-e and factomd. RCD-e addresses will be constrained to Pegnet at this time.